import Head from "next/head";
import Link from "next/link";
import styles from "../../styles/status.module.css";
import React, { Component, useEffect, useState } from "react";
import Header from "../../components/header/index";
import HomeButton from "../../components/homeButton";
import EventCard from "../../components/eventCards";
import product from "../../ethereum/product";
import web3 from "../../ethereum/web3";
import { Typography } from "@mui/material";

const Status = () => {
  const [productDetails, setProductDetails] = useState([]);
  const [currStatus, setCurrStatus] = useState(0);

  const [account, setAccount] = useState("");

  const fetchAccount = async () => {
    const acc = await web3.eth.getAccounts();
    setAccount(acc[0]);
  };

  useEffect(() => {
    fetchAccount();
  }, [account]);

  useEffect(() => {}, [productDetails]);

  const formSubmit = async (e) => {
    e.preventDefault();
    const pid = e.target[0].value;
    try {
      const accounts = await web3.eth.getAccounts();
      setAccount(accounts[0]);
      const pd = await product.methods.getProduct(pid).call({
        from: account,
      });

      setCurrStatus(
        await product.methods.getCurrStatus(pid).call({
          from: account,
        })
      );

      setProductDetails(pd[4]);
    } catch (err) {
      alert(err);
    }
  };

  const finishPasteurization = async (e) => {
    e.preventDefault();
    const pid = e.target[0].value;
    try {
      const accounts = await web3.eth.getAccounts();
      setAccount(accounts[0]);

      const quantity = await product.methods.getProductQuantity(pid).call({
        from: account,
      });

      if (quantity == 0) {
        const fp = await product.methods.finishPasteurization(pid).send({
          from: account,
        });
      } else {
        alert("Requirement not fulfilled");
      }

      setCurrStatus(
        await product.methods.getCurrStatus(pid).call({
          from: account,
        })
      );
    } catch (err) {
      alert(err);
    }
  };
  return (
    <>
      <Head>
        <title>Milk Supply</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.navBar}>
        <Header title="Status" />
        <Link href="/">
          <a>
            <HomeButton />
          </a>
        </Link>
      </div>
      <div className={styles.statusHeader}>
        <div className={styles.descriptionFormCard}>
          <form name="search" onSubmit={formSubmit}>
            <label className={styles.descriptionFormTitle}>Product Id: </label>
            <input
              className={styles.descriptionFormInput}
              name="id"
              type="text"
            ></input>
            <button className={styles.formButton}>Fetch</button>
          </form>
        </div>
        <div className={styles.addressContainer}>
          <Typography className={styles.descriptionFormTitle}>
            {" "}
            User:
          </Typography>
          <Typography className={styles.addressText}>{account}</Typography>
        </div>
      </div>
      <div className={styles.statusContainer}>
        <div
          className={
            productDetails.length > 0
              ? styles.eventCardContainer
              : styles.eventCardContainerRed
          }
        >
          <Typography className={styles.eventCardTitle}>
            Raw Material
          </Typography>
          {productDetails.length > 0 && (
            <div className={styles.eventRowCard}>
              {productDetails &&
                productDetails.map((row) => (
                  <EventCard
                    key={row[0]}
                    name={row[1]}
                    quantity={row[3]}
                    location={row[4]}
                    temperature={row[5]}
                    timestamp={row[2]}
                  />
                ))}
            </div>
          )}
        </div>
        <div
          className={
            currStatus >= 2
              ? styles.eventCardContainer
              : styles.eventCardContainerRed
          }
        >
          <Typography className={styles.eventCardTitle}>
            Pasteurization
          </Typography>
          {account && currStatus < 3 && (
            <div className={styles.finishFormContainer}>
              <form name="search" onSubmit={finishPasteurization}>
                <label className={styles.finishCardText}>Product Id: </label>
                <input
                  className={styles.finishCardInput}
                  name="id"
                  type="text"
                ></input>
                <button className={styles.formButton}>Change Status</button>
              </form>
            </div>
          )}
        </div>

        <div
          className={
            currStatus >= 3
              ? styles.eventCardContainer
              : styles.eventCardContainerRed
          }
        >
          <Typography className={styles.eventCardTitle}>
            Out for delivery
          </Typography>
        </div>
      </div>
    </>
  );
};

export default Status;
